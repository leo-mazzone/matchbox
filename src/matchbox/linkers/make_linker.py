import warnings
from abc import ABC, abstractmethod
from typing import Any, Callable, Dict

from pandas import DataFrame
from pydantic import BaseModel, Field, ValidationInfo, field_validator

from matchbox.common.results import ProbabilityResults


class LinkerSettings(BaseModel):
    """
    A data class to enforce basic settings dictionary shapes
    """

    left_id: str = Field(description="The unique ID column in the left dataset")
    right_id: str = Field(description="The unique ID column in the right dataset")

    @field_validator("left_id", "right_id")
    @classmethod
    def _id_for_cmf(cls, v: str, info: ValidationInfo) -> str:
        enforce = "cluster_sha1"
        if v != enforce:
            warnings.warn(
                f"For offline deduplication, {info.field_name} can be any field. \n\n"
                "When deduplicating to write back to the Company Matching "
                f"Framework database, the ID must be {enforce}, generated by "
                "retrieving data with cmf.query().",
                stacklevel=3,
            )
        return v


class Linker(BaseModel, ABC):
    settings: LinkerSettings

    @classmethod
    @abstractmethod
    def from_settings(cls) -> "Linker":
        raise NotImplementedError(
            """\
            Must implement method to instantiate from settings \
            -- consider creating a pydantic model to enforce shape.
        """
        )

    @abstractmethod
    def prepare(self, left: DataFrame, right: DataFrame) -> None:
        return

    @abstractmethod
    def link(self, left: DataFrame, right: DataFrame) -> DataFrame:
        return


def make_linker(
    link_run_name: str,
    description: str,
    linker: Linker,
    linker_settings: Dict[str, Any],
    left_data: DataFrame,
    left_source: str,
    right_data: DataFrame,
    right_source: str,
) -> Callable[[DataFrame], ProbabilityResults]:
    linker_instance = linker.from_settings(**linker_settings)
    linker_instance.prepare(left=left_data, right=right_data)

    def linker(
        left_data: DataFrame = left_data, right_data: DataFrame = right_data
    ) -> ProbabilityResults:
        return ProbabilityResults(
            dataframe=linker_instance.link(left=left_data, right=right_data),
            run_name=link_run_name,
            description=description,
            left=left_source,
            right=right_source,
        )

    return linker

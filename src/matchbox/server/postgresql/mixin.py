from typing import TypeVar
from uuid import UUID as uuUUID
from uuid import uuid4

from sqlalchemy import UUID, func
from sqlalchemy.dialects.postgresql import BYTEA
from sqlalchemy.orm import Mapped, mapped_column

from matchbox.server.postgresql.db import Base

T = TypeVar("T", bound="Base")


class CountMixin:
    @classmethod
    def count(cls: type[T]) -> int:
        with cls.get_session() as session:
            return session.query(func.count()).select_from(cls).scalar()


class SHA1Mixin:
    # Not autogenerated
    sha1: Mapped[bytes] = mapped_column(BYTEA, primary_key=True)


class UUIDMixin:
    uuid: Mapped[uuUUID] = mapped_column(
        UUID, primary_key=True, default=uuid4, server_default=func.gen_random_uuid()
    )
